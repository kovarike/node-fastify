{"version":3,"file":"schema.mjs","sources":["../../node_modules/drizzle-orm/pg-core/indexes.js","../../src/db/schema.ts"],"sourcesContent":["import { SQL } from \"../sql/sql.js\";\nimport { entityKind, is } from \"../entity.js\";\nimport { IndexedColumn } from \"./columns/index.js\";\nclass IndexBuilderOn {\n  constructor(unique, name) {\n    this.unique = unique;\n    this.name = name;\n  }\n  static [entityKind] = \"PgIndexBuilderOn\";\n  on(...columns) {\n    return new IndexBuilder(\n      columns.map((it) => {\n        if (is(it, SQL)) {\n          return it;\n        }\n        it = it;\n        const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);\n        it.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));\n        return clonedIndexedColumn;\n      }),\n      this.unique,\n      false,\n      this.name\n    );\n  }\n  onOnly(...columns) {\n    return new IndexBuilder(\n      columns.map((it) => {\n        if (is(it, SQL)) {\n          return it;\n        }\n        it = it;\n        const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);\n        it.indexConfig = it.defaultConfig;\n        return clonedIndexedColumn;\n      }),\n      this.unique,\n      true,\n      this.name\n    );\n  }\n  /**\n   * Specify what index method to use. Choices are `btree`, `hash`, `gist`, `spgist`, `gin`, `brin`, or user-installed access methods like `bloom`. The default method is `btree.\n   *\n   * If you have the `pg_vector` extension installed in your database, you can use the `hnsw` and `ivfflat` options, which are predefined types.\n   *\n   * **You can always specify any string you want in the method, in case Drizzle doesn't have it natively in its types**\n   *\n   * @param method The name of the index method to be used\n   * @param columns\n   * @returns\n   */\n  using(method, ...columns) {\n    return new IndexBuilder(\n      columns.map((it) => {\n        if (is(it, SQL)) {\n          return it;\n        }\n        it = it;\n        const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);\n        it.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));\n        return clonedIndexedColumn;\n      }),\n      this.unique,\n      true,\n      this.name,\n      method\n    );\n  }\n}\nclass IndexBuilder {\n  static [entityKind] = \"PgIndexBuilder\";\n  /** @internal */\n  config;\n  constructor(columns, unique, only, name, method = \"btree\") {\n    this.config = {\n      name,\n      columns,\n      unique,\n      only,\n      method\n    };\n  }\n  concurrently() {\n    this.config.concurrently = true;\n    return this;\n  }\n  with(obj) {\n    this.config.with = obj;\n    return this;\n  }\n  where(condition) {\n    this.config.where = condition;\n    return this;\n  }\n  /** @internal */\n  build(table) {\n    return new Index(this.config, table);\n  }\n}\nclass Index {\n  static [entityKind] = \"PgIndex\";\n  config;\n  constructor(config, table) {\n    this.config = { ...config, table };\n  }\n}\nfunction index(name) {\n  return new IndexBuilderOn(false, name);\n}\nfunction uniqueIndex(name) {\n  return new IndexBuilderOn(true, name);\n}\nexport {\n  Index,\n  IndexBuilder,\n  IndexBuilderOn,\n  index,\n  uniqueIndex\n};\n//# sourceMappingURL=indexes.js.map",null],"names":["uuidTimestamp"],"mappings":"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","x_google_ignoreList":[0]}